{
  "version": 3,
  "sources": ["../bundle-v8NUTN/checked-fetch.js", "../../../src/rate-limiter.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-v8NUTN/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-v8NUTN/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\Admin\\Desktop\\lyric-muse-organizer\\mletras-auth-backend\\.wrangler\\tmp\\dev-MMe7Nb",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\r\n * Durable Object for per-user rate limiting\r\n * Handles burst limiting (requests per minute) for individual users\r\n */\r\n\r\ninterface RateLimitState {\r\n  requests: Array<{ timestamp: number }>;\r\n  lastReset: number;\r\n}\r\n\r\ninterface RateLimitConfig {\r\n  burstLimit: number;\r\n  windowSeconds: number;\r\n}\r\n\r\nexport class RateLimiter {\r\n  private state: DurableObjectState;\r\n  private env: any;\r\n\r\n  constructor(state: DurableObjectState, env: any) {\r\n    this.state = state;\r\n    this.env = env;\r\n  }\r\n\r\n  async fetch(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const userId = url.searchParams.get('userId');\r\n    const userType = url.searchParams.get('userType') || 'free';\r\n\r\n    if (!userId) {\r\n      return new Response(JSON.stringify({ error: 'User ID required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Get rate limit configuration based on user type\r\n    const config = this.getRateLimitConfig(userType);\r\n\r\n    try {\r\n      switch (url.pathname) {\r\n        case '/check':\r\n          return await this.checkRateLimit(userId, config);\r\n        case '/record':\r\n          return await this.recordRequest(userId, config);\r\n        case '/reset':\r\n          return await this.resetRateLimit(userId);\r\n        default:\r\n          return new Response(JSON.stringify({ error: 'Not found' }), {\r\n            status: 404,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n      }\r\n    } catch (error) {\r\n      console.error('RateLimiter error:', error);\r\n      return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n\r\n  private getRateLimitConfig(userType: string): RateLimitConfig {\r\n    const burstWindowSeconds = parseInt(this.env.BURST_WINDOW_SECONDS || '60');\r\n    \r\n    if (userType === 'pro') {\r\n      return {\r\n        burstLimit: parseInt(this.env.PRO_BURST_LIMIT || '20'),\r\n        windowSeconds: burstWindowSeconds\r\n      };\r\n    } else {\r\n      return {\r\n        burstLimit: parseInt(this.env.FREE_BURST_LIMIT || '5'),\r\n        windowSeconds: burstWindowSeconds\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkRateLimit(userId: string, config: RateLimitConfig): Promise<Response> {\r\n    const stateKey = `rate_limit_${userId}`;\r\n    const stored = await this.state.storage.get<RateLimitState>(stateKey);\r\n    \r\n    const now = Date.now();\r\n    const windowStart = now - (config.windowSeconds * 1000);\r\n    \r\n    let rateLimitState: RateLimitState = stored || {\r\n      requests: [],\r\n      lastReset: now\r\n    };\r\n\r\n    // Clean old requests outside the window\r\n    rateLimitState.requests = rateLimitState.requests.filter(\r\n      req => req.timestamp > windowStart\r\n    );\r\n\r\n    const currentRequests = rateLimitState.requests.length;\r\n    const isAllowed = currentRequests < config.burstLimit;\r\n\r\n    return new Response(JSON.stringify({\r\n      allowed: isAllowed,\r\n      currentRequests,\r\n      limit: config.burstLimit,\r\n      windowSeconds: config.windowSeconds,\r\n      resetTime: windowStart + (config.windowSeconds * 1000)\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  private async recordRequest(userId: string, config: RateLimitConfig): Promise<Response> {\r\n    const stateKey = `rate_limit_${userId}`;\r\n    const stored = await this.state.storage.get<RateLimitState>(stateKey);\r\n    \r\n    const now = Date.now();\r\n    const windowStart = now - (config.windowSeconds * 1000);\r\n    \r\n    let rateLimitState: RateLimitState = stored || {\r\n      requests: [],\r\n      lastReset: now\r\n    };\r\n\r\n    // Clean old requests outside the window\r\n    rateLimitState.requests = rateLimitState.requests.filter(\r\n      req => req.timestamp > windowStart\r\n    );\r\n\r\n    // Check if we can record this request\r\n    if (rateLimitState.requests.length >= config.burstLimit) {\r\n      return new Response(JSON.stringify({\r\n        allowed: false,\r\n        error: 'Rate limit exceeded',\r\n        currentRequests: rateLimitState.requests.length,\r\n        limit: config.burstLimit,\r\n        retryAfter: Math.ceil((rateLimitState.requests[0].timestamp + (config.windowSeconds * 1000) - now) / 1000)\r\n      }), {\r\n        status: 429,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Record the request\r\n    rateLimitState.requests.push({ timestamp: now });\r\n    await this.state.storage.put(stateKey, rateLimitState);\r\n\r\n    return new Response(JSON.stringify({\r\n      allowed: true,\r\n      currentRequests: rateLimitState.requests.length,\r\n      limit: config.burstLimit\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  private async resetRateLimit(userId: string): Promise<Response> {\r\n    const stateKey = `rate_limit_${userId}`;\r\n    await this.state.storage.delete(stateKey);\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Rate limit reset'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "/**\r\n * MLetras Auth API - Production-ready authentication and metering system\r\n * Handles passwordless email auth, rate limiting, and admin functions\r\n */\r\n\r\nimport { RateLimiter } from './rate-limiter';\r\n\r\ninterface Env {\r\n  DB: D1Database;\r\n  SESSIONS: KVNamespace;\r\n  RATE_LIMITER: DurableObjectNamespace;\r\n  JWT_SECRET: string;\r\n  EMAIL_API_KEY: string;\r\n  MUSIXMATCH_API_KEY: string;\r\n  ALLOWED_ORIGINS: string;\r\n  FREE_DAILY_LIMIT: string;\r\n  FREE_BURST_LIMIT: string;\r\n  PRO_DAILY_LIMIT: string;\r\n  PRO_BURST_LIMIT: string;\r\n  BURST_WINDOW_SECONDS: string;\r\n  ENVIRONMENT: string;\r\n}\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  email_verified: boolean;\r\n  subscription_type: 'free' | 'pro';\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_login_at: string | null;\r\n  is_active: boolean;\r\n}\r\n\r\ninterface SessionData {\r\n  userId: string;\r\n  email: string;\r\n  subscription_type: 'free' | 'pro';\r\n  createdAt: number;\r\n  expiresAt: number;\r\n}\r\n\r\nclass AuthAPI {\r\n  private env: Env;\r\n  private allowedOrigins: string[];\r\n\r\n  constructor(env: Env) {\r\n    this.env = env;\r\n    this.allowedOrigins = env.ALLOWED_ORIGINS.split(',').map(origin => origin.trim());\r\n  }\r\n\r\n  /**\r\n   * Handle CORS preflight requests\r\n   */\r\n  private handleCors(origin?: string): Response {\r\n    const headers = new Headers();\r\n    \r\n    if (origin && this.allowedOrigins.includes(origin)) {\r\n      headers.set('Access-Control-Allow-Origin', origin);\r\n    } else if (this.allowedOrigins.includes('*')) {\r\n      headers.set('Access-Control-Allow-Origin', '*');\r\n    } else {\r\n      headers.set('Access-Control-Allow-Origin', this.allowedOrigins[0]);\r\n    }\r\n    \r\n    headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n    headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\r\n    headers.set('Access-Control-Allow-Credentials', 'true');\r\n    headers.set('Access-Control-Max-Age', '86400');\r\n    \r\n    return new Response(null, { status: 204, headers });\r\n  }\r\n\r\n  /**\r\n   * Set CORS headers on response\r\n   */\r\n  private setCorsHeaders(response: Response, origin?: string): Response {\r\n    const headers = new Headers(response.headers);\r\n    \r\n    if (origin && this.allowedOrigins.includes(origin)) {\r\n      headers.set('Access-Control-Allow-Origin', origin);\r\n    } else if (this.allowedOrigins.includes('*')) {\r\n      headers.set('Access-Control-Allow-Origin', '*');\r\n    } else {\r\n      headers.set('Access-Control-Allow-Origin', this.allowedOrigins[0]);\r\n    }\r\n    \r\n    headers.set('Access-Control-Allow-Credentials', 'true');\r\n    \r\n    return new Response(response.body, {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      headers\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate a secure random string\r\n   */\r\n  private generateRandomString(length: number = 32): string {\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result = '';\r\n    const array = new Uint8Array(length);\r\n    crypto.getRandomValues(array);\r\n    for (let i = 0; i < length; i++) {\r\n      result += chars[array[i] % chars.length];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate OTP code\r\n   */\r\n  private generateOTP(): string {\r\n    return Math.floor(100000 + Math.random() * 900000).toString();\r\n  }\r\n\r\n  /**\r\n   * Send OTP email using Resend\r\n   */\r\n  private async sendOTPEmail(email: string, code: string, type: string): Promise<boolean> {\r\n    try {\r\n      // For development, just log the OTP\r\n      if (this.env.ENVIRONMENT === 'development') {\r\n        console.log(`[DEV] OTP for ${email}: ${code}`);\r\n        return true;\r\n      }\r\n\r\n      const emailType = type === 'signup' ? 'sign up' : 'log in';\r\n      const subject = `Your MLetras ${emailType} code`;\r\n      \r\n      const htmlContent = `\r\n        <!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n          <meta charset=\"utf-8\">\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n          <title>Your MLetras Verification Code</title>\r\n          <style>\r\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 0; background-color: #f9fafb; }\r\n            .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n            .card { background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); padding: 32px; }\r\n            .header { text-align: center; margin-bottom: 32px; }\r\n            .logo { color: #0ea5e9; font-size: 24px; font-weight: bold; margin-bottom: 8px; }\r\n            .title { color: #111827; font-size: 20px; font-weight: 600; margin-bottom: 8px; }\r\n            .subtitle { color: #6b7280; font-size: 14px; }\r\n            .code-container { background: #f3f4f6; border-radius: 8px; padding: 24px; text-align: center; margin: 24px 0; }\r\n            .code { font-size: 32px; font-weight: bold; color: #111827; letter-spacing: 8px; font-family: monospace; }\r\n            .info { color: #6b7280; font-size: 14px; text-align: center; margin-top: 24px; }\r\n            .footer { margin-top: 32px; padding-top: 24px; border-top: 1px solid #e5e7eb; text-align: center; color: #9ca3af; font-size: 12px; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"container\">\r\n            <div class=\"card\">\r\n              <div class=\"header\">\r\n                <div class=\"logo\">\uD83C\uDFB5 MLetras</div>\r\n                <div class=\"title\">Your verification code</div>\r\n                <div class=\"subtitle\">Use this code to ${emailType} to your account</div>\r\n              </div>\r\n              \r\n              <div class=\"code-container\">\r\n                <div class=\"code\">${code}</div>\r\n              </div>\r\n              \r\n              <div class=\"info\">\r\n                This code will expire in 10 minutes.<br>\r\n                If you didn't request this code, please ignore this email.\r\n              </div>\r\n              \r\n              <div class=\"footer\">\r\n                <p>This email was sent from MLetras (noreply@mail.mletras.com)</p>\r\n                <p>If you have any questions, please contact our support team.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </body>\r\n        </html>\r\n      `;\r\n\r\n      const textContent = `\r\nMLetras Verification Code\r\n\r\nYour ${emailType} code is: ${code}\r\n\r\nThis code will expire in 10 minutes.\r\n\r\nIf you didn't request this code, please ignore this email.\r\n\r\n--\r\nMLetras Team\r\nnoreply@mail.mletras.com\r\n      `;\r\n\r\n      const response = await fetch('https://api.resend.com/emails', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.env.EMAIL_API_KEY}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          from: 'MLetras <noreply@mail.mletras.com>',\r\n          to: [email],\r\n          subject: subject,\r\n          html: htmlContent,\r\n          text: textContent,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.text();\r\n        console.error('Resend API error:', response.status, errorData);\r\n        return false;\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log(`OTP email sent successfully to ${email}, message ID: ${result.id}`);\r\n      return true;\r\n\r\n    } catch (error) {\r\n      console.error('Failed to send OTP email:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create JWT token\r\n   */\r\n  private async createJWT(payload: any): Promise<string> {\r\n    const header = { alg: 'HS256', typ: 'JWT' };\r\n    const now = Math.floor(Date.now() / 1000);\r\n    \r\n    const jwtPayload = {\r\n      ...payload,\r\n      iat: now,\r\n      exp: now + (24 * 60 * 60) // 24 hours\r\n    };\r\n\r\n    const encodedHeader = btoa(JSON.stringify(header));\r\n    const encodedPayload = btoa(JSON.stringify(jwtPayload));\r\n    const signature = await crypto.subtle.sign(\r\n      'HMAC',\r\n      await crypto.subtle.importKey(\r\n        'raw',\r\n        new TextEncoder().encode(this.env.JWT_SECRET),\r\n        { name: 'HMAC', hash: 'SHA-256' },\r\n        false,\r\n        ['sign']\r\n      ),\r\n      new TextEncoder().encode(`${encodedHeader}.${encodedPayload}`)\r\n    );\r\n\r\n    const encodedSignature = btoa(String.fromCharCode(...new Uint8Array(signature)));\r\n    return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\r\n  }\r\n\r\n  /**\r\n   * Verify JWT token\r\n   */\r\n  private async verifyJWT(token: string): Promise<any | null> {\r\n    try {\r\n      const [header, payload, signature] = token.split('.');\r\n      \r\n      const expectedSignature = await crypto.subtle.sign(\r\n        'HMAC',\r\n        await crypto.subtle.importKey(\r\n          'raw',\r\n          new TextEncoder().encode(this.env.JWT_SECRET),\r\n          { name: 'HMAC', hash: 'SHA-256' },\r\n          false,\r\n          ['sign']\r\n        ),\r\n        new TextEncoder().encode(`${header}.${payload}`)\r\n      );\r\n\r\n      const expectedSignatureB64 = btoa(String.fromCharCode(...new Uint8Array(expectedSignature)));\r\n      \r\n      if (signature !== expectedSignatureB64) {\r\n        return null;\r\n      }\r\n\r\n      const decodedPayload = JSON.parse(atob(payload));\r\n      \r\n      if (decodedPayload.exp < Math.floor(Date.now() / 1000)) {\r\n        return null;\r\n      }\r\n\r\n      return decodedPayload;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user session from cookie\r\n   */\r\n  private async getSessionFromCookie(cookie: string): Promise<SessionData | null> {\r\n    const match = cookie.match(/session=([^;]+)/);\r\n    if (!match) return null;\r\n\r\n    try {\r\n      const token = match[1];\r\n      const payload = await this.verifyJWT(token);\r\n      \r\n      if (!payload) return null;\r\n\r\n      // Verify session exists in KV\r\n      const sessionData = await this.env.SESSIONS.get(`session:${payload.userId}`);\r\n      if (!sessionData) return null;\r\n\r\n      const session: SessionData = JSON.parse(sessionData);\r\n      \r\n      if (session.expiresAt < Date.now()) {\r\n        await this.env.SESSIONS.delete(`session:${payload.userId}`);\r\n        return null;\r\n      }\r\n\r\n      return session;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create user session\r\n   */\r\n  private async createSession(user: User): Promise<string> {\r\n    const sessionData: SessionData = {\r\n      userId: user.id,\r\n      email: user.email,\r\n      subscription_type: user.subscription_type,\r\n      createdAt: Date.now(),\r\n      expiresAt: Date.now() + (24 * 60 * 60 * 1000) // 24 hours\r\n    };\r\n\r\n    const token = await this.createJWT({\r\n      userId: user.id,\r\n      email: user.email,\r\n      subscription_type: user.subscription_type\r\n    });\r\n\r\n    // Store session in KV\r\n    await this.env.SESSIONS.put(`session:${user.id}`, JSON.stringify(sessionData), {\r\n      expirationTtl: 24 * 60 * 60 // 24 hours\r\n    });\r\n\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * Handle signup/login request\r\n   */\r\n  private async handleAuthRequest(email: string, type: 'signup' | 'login'): Promise<Response> {\r\n    try {\r\n      // Validate email format\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        return new Response(JSON.stringify({ error: 'Invalid email format' }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n\r\n      const normalizedEmail = email.toLowerCase().trim();\r\n\r\n      // Check if user exists\r\n      const existingUser = await this.env.DB.prepare(\r\n        'SELECT * FROM users WHERE email = ?'\r\n      ).bind(normalizedEmail).first<User>();\r\n\r\n      let userId: string;\r\n      let isNewUser = false;\r\n\r\n      if (existingUser) {\r\n        userId = existingUser.id;\r\n        \r\n        // Update last login attempt\r\n        await this.env.DB.prepare(\r\n          'UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = ?'\r\n        ).bind(userId).run();\r\n      } else {\r\n        if (type === 'login') {\r\n          return new Response(JSON.stringify({ error: 'User not found' }), {\r\n            status: 404,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n        \r\n        // Create new user\r\n        userId = this.generateRandomString();\r\n        await this.env.DB.prepare(\r\n          'INSERT INTO users (id, email, email_verified, subscription_type) VALUES (?, ?, ?, ?)'\r\n        ).bind(userId, normalizedEmail, false, 'free').run();\r\n        \r\n        isNewUser = true;\r\n      }\r\n\r\n      // Generate and store OTP\r\n      const otpCode = this.generateOTP();\r\n      const otpId = this.generateRandomString();\r\n      const expiresAt = new Date(Date.now() + (10 * 60 * 1000)); // 10 minutes\r\n\r\n      await this.env.DB.prepare(\r\n        'INSERT INTO otps (id, user_id, email, code, type, expires_at) VALUES (?, ?, ?, ?, ?, ?)'\r\n      ).bind(otpId, userId, normalizedEmail, otpCode, type, expiresAt.toISOString()).run();\r\n\r\n      // Send OTP email\r\n      const emailSent = await this.sendOTPEmail(normalizedEmail, otpCode, type);\r\n\r\n      if (!emailSent) {\r\n        return new Response(JSON.stringify({ error: 'Failed to send OTP email' }), {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n\r\n      return new Response(JSON.stringify({\r\n        success: true,\r\n        message: `OTP sent to ${normalizedEmail}`,\r\n        isNewUser,\r\n        expiresIn: 600 // 10 minutes in seconds\r\n      }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Auth request error:', error);\r\n      return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle OTP verification\r\n   */\r\n  private async handleOTPVerification(email: string, code: string): Promise<Response> {\r\n    try {\r\n      const normalizedEmail = email.toLowerCase().trim();\r\n\r\n      // Find valid OTP\r\n      const otp = await this.env.DB.prepare(\r\n        'SELECT * FROM otps WHERE email = ? AND code = ? AND used_at IS NULL AND expires_at > ? ORDER BY created_at DESC LIMIT 1'\r\n      ).bind(normalizedEmail, code, new Date().toISOString()).first();\r\n\r\n      if (!otp) {\r\n        return new Response(JSON.stringify({ error: 'Invalid or expired OTP' }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n\r\n      // Mark OTP as used\r\n      await this.env.DB.prepare(\r\n        'UPDATE otps SET used_at = CURRENT_TIMESTAMP WHERE id = ?'\r\n      ).bind(otp.id).run();\r\n\r\n      // Get or create user\r\n      let user = await this.env.DB.prepare(\r\n        'SELECT * FROM users WHERE email = ?'\r\n      ).bind(normalizedEmail).first<User>();\r\n\r\n      if (!user) {\r\n        const userId = this.generateRandomString();\r\n        await this.env.DB.prepare(\r\n          'INSERT INTO users (id, email, email_verified, subscription_type, last_login_at) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)'\r\n        ).bind(userId, normalizedEmail, true, 'free').run();\r\n        \r\n        user = await this.env.DB.prepare(\r\n          'SELECT * FROM users WHERE id = ?'\r\n        ).bind(userId).first<User>();\r\n      } else {\r\n        // Update user login time and verify email\r\n        await this.env.DB.prepare(\r\n          'UPDATE users SET email_verified = TRUE, last_login_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\r\n        ).bind(user.id).run();\r\n        \r\n        user.email_verified = true;\r\n      }\r\n\r\n      // Create session\r\n      const sessionToken = await this.createSession(user!);\r\n\r\n      return new Response(JSON.stringify({\r\n        success: true,\r\n        message: 'Authentication successful',\r\n        user: {\r\n          id: user!.id,\r\n          email: user!.email,\r\n          subscription_type: user!.subscription_type,\r\n          email_verified: user!.email_verified\r\n        },\r\n        sessionToken\r\n      }), {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Set-Cookie': `session=${sessionToken}; HttpOnly; Secure; SameSite=Strict; Max-Age=${24 * 60 * 60}; Path=/`\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('OTP verification error:', error);\r\n      return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check rate limits and record usage\r\n   */\r\n  private async checkRateLimit(userId: string, userType: string, endpoint: string): Promise<{ allowed: boolean; error?: string; retryAfter?: number }> {\r\n    try {\r\n      // Get rate limiter Durable Object\r\n      const rateLimiterId = this.env.RATE_LIMITER.idFromName(userId);\r\n      const rateLimiter = this.env.RATE_LIMITER.get(rateLimiterId);\r\n\r\n      // Check burst limit\r\n      const burstResponse = await rateLimiter.fetch(\r\n        `https://rate-limiter/check?userId=${userId}&userType=${userType}`\r\n      );\r\n      \r\n      const burstData = await burstResponse.json();\r\n      \r\n      if (!burstData.allowed) {\r\n        return {\r\n          allowed: false,\r\n          error: 'Rate limit exceeded',\r\n          retryAfter: burstData.resetTime ? Math.ceil((burstData.resetTime - Date.now()) / 1000) : 60\r\n        };\r\n      }\r\n\r\n      // Check daily limit\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const dailyUsage = await this.env.DB.prepare(\r\n        'SELECT request_count FROM usage_logs WHERE user_id = ? AND date = ? AND endpoint = ?'\r\n      ).bind(userId, today, endpoint).first<{ request_count: number }>();\r\n\r\n      const dailyLimit = userType === 'pro' \r\n        ? parseInt(this.env.PRO_DAILY_LIMIT) \r\n        : parseInt(this.env.FREE_DAILY_LIMIT);\r\n\r\n      const currentUsage = dailyUsage?.request_count || 0;\r\n\r\n      if (currentUsage >= dailyLimit) {\r\n        return {\r\n          allowed: false,\r\n          error: 'Daily limit exceeded'\r\n        };\r\n      }\r\n\r\n      // Record usage\r\n      await this.env.DB.prepare(\r\n        'INSERT OR REPLACE INTO usage_logs (id, user_id, endpoint, request_count, date) VALUES (?, ?, ?, ?, ?)'\r\n      ).bind(\r\n        this.generateRandomString(),\r\n        userId,\r\n        endpoint,\r\n        currentUsage + 1,\r\n        today\r\n      ).run();\r\n\r\n      // Record burst usage\r\n      await rateLimiter.fetch(\r\n        `https://rate-limiter/record?userId=${userId}&userType=${userType}`\r\n      );\r\n\r\n      return { allowed: true };\r\n\r\n    } catch (error) {\r\n      console.error('Rate limit check error:', error);\r\n      return { allowed: true }; // Allow on error to avoid blocking legitimate requests\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle lyrics API requests with rate limiting\r\n   */\r\n  private async handleLyricsRequest(request: Request, session: SessionData): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const endpoint = url.pathname;\r\n\r\n    // Check rate limits\r\n    const rateLimitResult = await this.checkRateLimit(\r\n      session.userId,\r\n      session.subscription_type,\r\n      endpoint\r\n    );\r\n\r\n    if (!rateLimitResult.allowed) {\r\n      const response = new Response(JSON.stringify({\r\n        error: rateLimitResult.error,\r\n        retryAfter: rateLimitResult.retryAfter,\r\n        userType: session.subscription_type\r\n      }), {\r\n        status: 429,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      return this.setCorsHeaders(response);\r\n    }\r\n\r\n    // Proxy request to Musixmatch API\r\n    const musixmatchUrl = new URL(`https://api.musixmatch.com/ws/1.1${endpoint}`);\r\n    musixmatchUrl.searchParams.set('apikey', this.env.MUSIXMATCH_API_KEY);\r\n    musixmatchUrl.searchParams.set('format', 'json');\r\n\r\n    // Copy query parameters\r\n    url.searchParams.forEach((value, key) => {\r\n      if (key !== 'apikey') {\r\n        musixmatchUrl.searchParams.set(key, value);\r\n      }\r\n    });\r\n\r\n    try {\r\n      const musixmatchResponse = await fetch(musixmatchUrl.toString());\r\n      const data = await musixmatchResponse.json();\r\n\r\n      const response = new Response(JSON.stringify(data), {\r\n        status: musixmatchResponse.status,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Rate-Limit-Remaining': (rateLimitResult.allowed ? 'ok' : 'exceeded')\r\n        }\r\n      });\r\n\r\n      return this.setCorsHeaders(response);\r\n\r\n    } catch (error) {\r\n      console.error('Musixmatch API error:', error);\r\n      const response = new Response(JSON.stringify({ error: 'External API error' }), {\r\n        status: 502,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      return this.setCorsHeaders(response);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main request handler\r\n   */\r\n  async handleRequest(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const origin = request.headers.get('Origin');\r\n\r\n    // Handle CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return this.handleCors(origin);\r\n    }\r\n\r\n    try {\r\n      // Route handling\r\n      const path = url.pathname;\r\n\r\n      if (path.startsWith('/auth/')) {\r\n        return this.handleAuthRoutes(request, origin);\r\n      } else if (path.startsWith('/api/')) {\r\n        return this.handleAPIRoutes(request, origin);\r\n      } else if (path.startsWith('/admin/')) {\r\n        return this.handleAdminRoutes(request, origin);\r\n      } else {\r\n        return this.setCorsHeaders(new Response(JSON.stringify({ error: 'Not found' }), {\r\n          status: 404,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }), origin);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Request handling error:', error);\r\n      return this.setCorsHeaders(new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }), origin);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle authentication routes\r\n   */\r\n  private async handleAuthRoutes(request: Request, origin?: string): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n\r\n    if (path === '/auth/signup' && request.method === 'POST') {\r\n      const body = await request.json();\r\n      const response = await this.handleAuthRequest(body.email, 'signup');\r\n      return this.setCorsHeaders(response, origin);\r\n    }\r\n\r\n    if (path === '/auth/login' && request.method === 'POST') {\r\n      const body = await request.json();\r\n      const response = await this.handleAuthRequest(body.email, 'login');\r\n      return this.setCorsHeaders(response, origin);\r\n    }\r\n\r\n    if (path === '/auth/verify' && request.method === 'POST') {\r\n      const body = await request.json();\r\n      const response = await this.handleOTPVerification(body.email, body.code);\r\n      return this.setCorsHeaders(response, origin);\r\n    }\r\n\r\n    if (path === '/auth/logout' && request.method === 'POST') {\r\n      const cookie = request.headers.get('Cookie') || '';\r\n      const session = await this.getSessionFromCookie(cookie);\r\n      \r\n      if (session) {\r\n        await this.env.SESSIONS.delete(`session:${session.userId}`);\r\n      }\r\n\r\n      const response = new Response(JSON.stringify({ success: true }), {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Set-Cookie': 'session=; HttpOnly; Secure; SameSite=Strict; Max-Age=0; Path=/'\r\n        }\r\n      });\r\n\r\n      return this.setCorsHeaders(response, origin);\r\n    }\r\n\r\n    if (path === '/auth/me' && request.method === 'GET') {\r\n      const cookie = request.headers.get('Cookie') || '';\r\n      const session = await this.getSessionFromCookie(cookie);\r\n      \r\n      if (!session) {\r\n        const response = new Response(JSON.stringify({ error: 'Not authenticated' }), {\r\n          status: 401,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n        return this.setCorsHeaders(response, origin);\r\n      }\r\n\r\n      const user = await this.env.DB.prepare(\r\n        'SELECT id, email, subscription_type, email_verified, created_at FROM users WHERE id = ?'\r\n      ).bind(session.userId).first();\r\n\r\n      const response = new Response(JSON.stringify({\r\n        user: {\r\n          id: user?.id,\r\n          email: user?.email,\r\n          subscription_type: user?.subscription_type,\r\n          email_verified: user?.email_verified,\r\n          created_at: user?.created_at\r\n        }\r\n      }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      return this.setCorsHeaders(response, origin);\r\n    }\r\n\r\n    return this.setCorsHeaders(new Response(JSON.stringify({ error: 'Not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }), origin);\r\n  }\r\n\r\n  /**\r\n   * Handle API routes (lyrics endpoints)\r\n   */\r\n  private async handleAPIRoutes(request: Request, origin?: string): Promise<Response> {\r\n    const cookie = request.headers.get('Cookie') || '';\r\n    const session = await this.getSessionFromCookie(cookie);\r\n    \r\n    if (!session) {\r\n      const response = new Response(JSON.stringify({ error: 'Authentication required' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      return this.setCorsHeaders(response, origin);\r\n    }\r\n\r\n    return await this.handleLyricsRequest(request, session);\r\n  }\r\n\r\n  /**\r\n   * Handle admin routes (placeholder)\r\n   */\r\n  private async handleAdminRoutes(request: Request, origin?: string): Promise<Response> {\r\n    // TODO: Implement admin authentication and routes\r\n    const response = new Response(JSON.stringify({ error: 'Admin routes not implemented yet' }), {\r\n      status: 501,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n    return this.setCorsHeaders(response, origin);\r\n  }\r\n}\r\n\r\n/**\r\n * Cloudflare Worker entry point\r\n */\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    const api = new AuthAPI(env);\r\n    return api.handleRequest(request);\r\n  }\r\n};\r\n\r\nexport { RateLimiter };\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\.wrangler\\\\tmp\\\\bundle-v8NUTN\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\.wrangler\\\\tmp\\\\bundle-v8NUTN\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\lyric-muse-organizer\\\\mletras-auth-backend\\\\.wrangler\\\\tmp\\\\bundle-v8NUTN\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["response"]
}
